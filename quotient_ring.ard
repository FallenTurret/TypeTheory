\import Algebra.Monoid
\import Algebra.Monoid.Prime
\import Algebra.Ring
\import Arith.Fin
\import Arith.Nat
\import Logic
\import Paths
\open Nat(mod,div)

\func trans {A : \Type} {a a' a'' : A} (p : a = a') (q : a' = a'') : a = a''
  => transport (\lam x => a = x) q p

\record divisor_of_zero (r : Ring)
  | a : r
  | b : r
  | a/=0 : a /= r.zro
  | b/=0 : b /= r.zro
  | a*b=0 : a r.* b = r.zro

\func prime_not_zero : \Pi (p : Prime {NatSemiring}) -> Not (p.e = 0) =>
  \lam (p : Prime {NatSemiring}) =>
    \lam (z : (p.e = 0)) =>
      suc/=0 (p.isCancelable-left {1} {0} z)

\func p-1 (p : Prime {NatSemiring}) : \Sigma (x : Nat) (p.e = suc x) =>
  \case p.e \as pp, idp : p.e = pp \with {
    | 0, q => absurd (prime_not_zero p q)
    | suc p', q => (p', q)
  }

\func lemma (a b : Nat) : (((suc a) Nat.* b) mod (suc a) = 0) \elim b
  | 0 => idp
  | suc b =>
    ((suc a) Nat.* (suc b)) mod (suc a) ==< idp >==
    ((suc a) Nat.* b Nat.+ (suc a)) mod (suc a) ==< inv (mod_+-left {a} {(suc a) Nat.* b} {suc a}) >==
    (((suc a) Nat.* b) mod (suc a) Nat.+ (suc a)) mod (suc a) ==< pmap (\lam x => (x Nat.+ (suc a)) mod (suc a)) (lemma a b) >==
    (suc a) mod (suc a) ==< n*_+_mod_n=mod {a} {1} {0} >==
    0 mod (suc a) `qed

\func proof : \Pi (p : Prime {NatSemiring}) -> Not (divisor_of_zero (FinRing {(p-1 p).1})) =>
  \lam (p : Prime {NatSemiring}) =>
    \lam (divs : divisor_of_zero (FinRing {(p-1 p).1})) =>
      \let | ab => divs.a Nat.* divs.b
           | p' => (p-1 p).1
           | r => (p-1 p).2
      \in
        \case ab div (suc p') \as qq, idp : ab div (suc p') = qq,
              ab mod (suc p') \as rr, idp : ab mod (suc p') = rr \with {
          | _, _, suc r, r' => suc/=0 (trans (inv r') divs.a*b=0)
          | q, q', 0, r' =>
            \let | pq=ab => inv (
              ab ==< inv (Nat.divModProp ab (suc p')) >==
              (suc p') Nat.* (ab div (suc p')) Nat.+ (ab mod (suc p')) ==< pmap2 (\lam qq rr => (suc p') Nat.* qq Nat.+ rr) q' r' >==
              (suc p') Nat.* q ==< pmap (\lam x => x Nat.* q) (inv r) >==
              p Nat.* q `qed
            )
            \in
              \let | d =>
                \new Monoid.LDiv {
                  | val => p
                  | elem => ab
                  | inv => q
                  | inv-right => pq=ab
                }
              \in
                \case p.isPrime d \with {
                  | byLeft (y : Monoid.LDiv p divs.a) => divs.a/=0 (=0 divs y)
                  | byRight (y : Monoid.LDiv p divs.b) => divs.b/=0 (=0 divs y)
                }
        }
  \where {
    \func =0 {p : Prime{NatSemiring}} (divs : divisor_of_zero (FinRing {(p-1 p).1}))
             {z : divs.r} (y : Monoid.LDiv p z) : z = divs.r.zro =>
      z ==< inv (fin_mod_id z) >==
      z mod (suc (p-1 p).1) ==< pmap (\lam x => x mod (suc (p-1 p).1)) (inv y.inv-right) >==
      (p Nat.* y.inv) mod (suc (p-1 p).1) ==< pmap (\lam x => (x Nat.* y.inv) mod (suc (p-1 p).1)) (p-1 p).2 >==
      ((suc (p-1 p).1) Nat.* y.inv) mod (suc (p-1 p).1) ==< lemma (p-1 p).1 y.inv >==
      divs.r.zro `qed
  }